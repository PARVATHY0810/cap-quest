<%- include("../../views/partials/user/header") %>

<style>
  .checkout-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    font-family: "Inter", sans-serif;
  }

  .page-title {
    font-size: 1.60rem;
    color: #1a1a1a;
    margin-bottom: 1.50rem;
    font-weight: 600;
  }

  .checkout-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
  }

  @media (max-width: 768px) {
    .checkout-grid {
      grid-template-columns: 1fr;
    }
  }

  .section-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    padding-bottom: 10px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #eee;
  }

  .section-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1a1a1a;
    display: flex;
    align-items: center;
    gap: 0.3rem;
    margin-bottom: 20px;
  }

  .address-card {
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    transition: all 0.2s;
  }

  .address-card:hover {
    border-color: #007bff;
    background: #f8f9ff;
  }

  .address-card input[type="radio"] {
    margin-right: 1rem;
  }

  .address-details {
    margin-top: 0.5rem;
    color: #666;
  }

  .btn-primary {
    background: #FFA500; /* Light Orange */
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    border: none;
    font-weight: 500;
    transition: all 0.2s;
}

.btn-primary:hover {
    background: #CC8400; /* Darker shade of orange */
}


  body {
    background-color: #f5f5f5;
  }
  .checkout-container {
    background-color: white;
    max-width: 1000px;
    margin: 2rem auto;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    border-radius: 10px;
  }
  .checkout-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
  }
  .address-card {
    display: flex;
    align-items: center;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    transition: all 0.3s ease;
  }
  .address-card:hover {
    border-color: #009688;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  .coupon-section {
    background-color: #f9f9f9;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
  }
  .coupon-input {
    display: flex;
    gap: 0.5rem;
  }
  .coupon-input input {
    flex-grow: 1;
    padding: 0.5rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
  }
  .place-order-btn {
    background-color: #009688;
    color: white;
    border: none;
    padding: 0.75rem;
    border-radius: 6px;
    width: 100%;
    font-weight: bold;
    transition: background-color 0.3s ease;
  }
  .place-order-btn:hover {
    background-color: #00796b;
  }
  
</style>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<div class="checkout-container">
  <h1 class="page-title">Checkout</h1>
  <div class="checkout-grid">
    <div>
      <div class="section-card">
        <div class="section-header">
          <h2 class="section-title">Delivery Address</h2>
          <a href="/addAddress" class="btn btn-outline-info" style="border-radius: 5px;">New Address</a>
        </div>
        <div id="saved-addresses">
          <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach(addr => { %>
              <div class="address-card">
                <input type="radio" name="deliveryAddress" value="<%= addr._id %>" id="address-<%= addr._id %>" />
                <strong><%= addr.name %></strong>
                <div class="address-details"><%= addr.city %>,<%= addr.landMark %>,  <%= addr.state %>, <%= addr.pincode %>,<%= addr.phone %></div>
              </div>
            <% }) %>
          <% } else { %>
            <p>No saved addresses found.</p>
          <% } %>
        </div>
      </div>
      <div class="section-card">
        <div class="section-header">
          <h2 class="section-title">Payment Options</h2>
        </div>
        <div class="payment_option">
          <label class="payment-option">
            <input type="radio" name="paymentMethod" value="COD" checked />
            Cash on Delivery
          </label>
          <label class="payment-option">
            <input type="radio" name="paymentMethod" value="razorpay" />
            Razorpay
          </label>
          <label class="payment-option">
      <input type="radio" name="paymentMethod" value="wallet" />
      Wallet
    </label>
        </div>
      </div>
    </div>

    <!-- Add this section before the Order Summary section -->
<!-- Add this section before the Order Summary section -->
<div class="section-card coupon-section">
  <h3>Apply Coupon</h3>
  <div class="coupon-input">
    <input type="text" id="coupon-code" placeholder="Enter coupon code">
    <button id="apply-coupon" class="btn btn-secondary">Apply</button>
  </div>
  <div id="coupon-result" class="mt-2"></div>
  <div class="available-coupons mt-3">
    <h4>Available Coupons:</h4>
    <div id="available-coupons-list">
      <!-- Dynamically populate available coupons -->
    </div>
  </div>
</div>
  <!-- Modal for Available Coupons -->
<div class="modal fade" id="couponModal" tabindex="-1" aria-labelledby="couponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content" style="border-radius: 12px;">
      <div class="modal-header" style="border-bottom: 1px solid #eee;">
        <h5 class="modal-title" id="couponModalLabel">Available Coupons</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="available-coupons-modal" style="padding: 1.5rem;">
        <!-- Coupons will be dynamically populated here -->
      </div>
    </div>
  </div>
</div>

<!-- Button to Open Coupon Modal -->
<!-- Replace the entire coupon section with this -->
</div>

    <div>
      <div class="section-card">
        <div class="section-header">
          <h2 class="section-title">Order Summary</h2>
        </div>
        <table class="order-table" data-cart-id="<%= cartId || '' %>">
          <thead>
            <tr>
              <th>Item</th>
              <th>Quantity</th>
              <th>Price</th>
            </tr>
          </thead>
          <tbody>
            <% cart.forEach(item => { %>
              <tr>
                <td><%= item.productId.productName %></td>
                <td><%= item.quantity %></td>
                <td>₹<%= (item.price).toFixed(2) %></td>
              </tr>
            <% }) %>
          </tbody>
        </table>
        <div class="price-summary">
          <div class="price-row">
            <span>Subtotal:</span>
            <span>₹<span id="subtotal"> <%= total.toFixed(2) %> </span></span>
          </div>
          <div class="price-row total">
            <span>Total:</span>
            <input id="total" type="hidden" value="<%= total.toFixed(2) %>">
            <span id="final-total">₹<%= total.toFixed(2) %></span>
          </div>
        </div>
        <button id="place-order" class="btn-primary">Place Order</button>
      </div>
    </div>
  </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
document.getElementById("place-order").addEventListener("click", function () {
  const selectedAddress = document.querySelector('input[name="deliveryAddress"]:checked');
  if (!selectedAddress) {
    swal({
      title: "Error!",
      text: "Please select a delivery address.",
      icon: "error",
      button: "OK",
    });
    return;
  }
  const addressId = selectedAddress.value;
  const cartId = document.querySelector("[data-cart-id]").getAttribute("data-cart-id");
  if (!cartId) {
    swal({
      title: "Error!",
      text: "Cart ID is missing. Please try again.",
      icon: "error",
      button: "OK",
    });
    return;
  }
  const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
  const finalAmount = parseFloat(document.getElementById("total").value);
  const couponCode = document.getElementById("coupon-code").value || ""; // Get the coupon code from input

  fetch("/create-order", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ 
      addressId, 
      cartId, 
      paymentMethod, 
      finalAmount, 
      couponCode // Add couponCode here
    })
  })
  .then(response => response.json())
  // Rest of the code remains the same...
  .then(data => {
    if (data.success) {
      if (paymentMethod === "razorpay") {
        const options = {
          key: "<%= process.env.RAZORPAY_KEY_ID %>",
          amount: finalAmount * 100,
          currency: "INR",
          name: "Your Company Name",
          description: "Test Transaction",
          order_id: data.razorpayOrderId,
          handler: function (response) {
            swal({
              title: "Success!",
              text: "Order Placed Successfully!",
              icon: "success",
              button: "Continue",
            }).then(() => {
              window.location.href = `/order-placed?orderId=${data.orderId}`;
            });
          },
          prefill: {
            name: "<%= userData.name %>",
            email: "<%= userData.email %>",
            contact: "<%= userData.phone %>"
          },
          notes: {
            address: "Razorpay Corporate Office"
          },
          theme: {
            color: "#3399cc"
          }
        };
        const rzp1 = new Razorpay(options);
        rzp1.on('payment.failed', function (response) {
          swal({
            title: "Error!",
            text: "Payment failed. Please try again.",
            icon: "error",
            button: "OK",
          });
        });
        rzp1.open();
      } else if (paymentMethod === "wallet") {
        // Handle wallet payment
        fetch("/process-wallet-payment", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ orderId: data.orderId, amount: finalAmount })
        })
        .then(response => response.json())
        .then(walletResponse => {
          if (walletResponse.success) {
            swal({
              title: "Success!",
              text: "Payment completed from wallet. Order Placed Successfully!",
              icon: "success",
              button: "Continue",
            }).then(() => {
              window.location.href = `/order-placed?orderId=${data.orderId}`;
            });
          } else {
            swal({
              title: "Error!",
              text: walletResponse.message || "Insufficient wallet balance",
              icon: "error",
              button: "OK",
            });
          }
        })
        .catch(error => {
          console.error("Wallet payment error:", error);
          swal({
            title: "Error!",
            text: "An error occurred during wallet payment.",
            icon: "error",
            button: "OK",
          });
        });
      } else {
        swal({
          title: "Success!",
          text: "Order Placed Successfully!",
          icon: "success",
          button: "Continue",
        }).then(() => {
          window.location.href = `/order-placed?orderId=${data.orderId}`;
        });
      }
    } else {
      swal({
        title: "Error!",
        text: "Error: " + data.message,
        icon: "error",
        button: "OK",
      });
    }
  })
  .catch(error => {
    console.error("Order placement error:", error);
    swal({
      title: "Error!",
      text: "An unexpected error occurred. Please try again later.",
      icon: "error",
      button: "OK",
    });
  });
});
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const couponSelect = document.getElementById('coupon-select');
    const applyCouponBtn = document.getElementById('apply-coupon');
    const couponResultDiv = document.getElementById('coupon-result');

    // Fetch and populate available coupons in the select dropdown
    async function fetchAvailableCoupons() {
      try {
        const response = await fetch('/get-available-coupons');
        const coupons = await response.json();

        const availableCouponsList = document.getElementById('available-coupons-list');
        availableCouponsList.innerHTML = ''; // Reset list

        coupons.forEach(coupon => {
          const couponDiv = document.createElement('div');
          couponDiv.textContent = `${coupon.code} - ₹${coupon.offerPrice} off (Min ₹${coupon.minimumPrice})`;
          availableCouponsList.appendChild(couponDiv);
        });
      } catch (error) {
        console.error('Error fetching coupons:', error);
        couponResultDiv.innerHTML = '<div class="text-danger">Error loading coupons</div>';
      }
    }

    // Apply coupon functionality
    async function applyCoupon(couponCode) {
      const total = parseFloat(document.getElementById('total').value);

      if (!couponCode) {
        couponResultDiv.innerHTML = '<div class="text-danger">Please select a coupon</div>';
        return;
      }

      try {
        const response = await fetch('/apply-coupon', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            couponCode, 
            total 
          })
        });

        const result = await response.json();

        if (result.success) {
          couponResultDiv.innerHTML = `
            <div class="text-success">
              Coupon applied! You saved ₹${result.discount}
            </div>
          `;
          
          // Update total
          const finalTotal = total - result.discount;
          document.getElementById('final-total').textContent = `₹${finalTotal.toFixed(2)}`;
          document.getElementById('total').value = finalTotal.toFixed(2);

          // Ensure couponCode is sent with order
          document.getElementById('place-order').dataset.couponCode = couponCode;
        } else {
          couponResultDiv.innerHTML = `
            <div class="text-danger">
              ${result.message}
            </div>
          `;
        }
      } catch (error) {
        couponResultDiv.innerHTML = '<div class="text-danger">Error applying coupon</div>';
      }
    }

    // Fetch coupons on page load
    fetchAvailableCoupons();

    // Apply coupon when button is clicked
    applyCouponBtn.addEventListener('click', () => {
      const couponCode = document.getElementById('coupon-code').value;
      applyCoupon(couponCode);
    });
    
  });
  
</script>
<script>
  // Check if there's a blocked product and show SweetAlert
  document.addEventListener('DOMContentLoaded', function() {
    <% if (locals.blockedProduct) { %>
      swal({
        title: "Error!",
        text: "<%= locals.blockedProductName ? 'Product ' + locals.blockedProductName + ' is blocked.' : 'One of the products in your cart is blocked.' %>",
        icon: "error",
        button: "OK",
      }).then(() => {
        window.location.href = "/cart"; // Redirect to cart page after alert
      });
    <% } %>
  });
</script>



<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>


<%- include("../../views/partials/user/footer") %>