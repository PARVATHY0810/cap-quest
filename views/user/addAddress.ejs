<title>Create User Address</title>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    body {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #fff; /* White background */
        color: #000; /* Black text */
    }

    .container {
        width: 50%; /* Reduced from 70% */
        max-width: 600px; /* Reduced from 900px */
        background: #fff;
        padding: 20px; /* Reduced from 30px */
        border-radius: 8px; /* Slightly smaller radius */
        border: 2px solid #ff6200; /* Orange border */
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Reduced shadow */
        margin: 15px auto; /* Reduced margin */
    }

    /* Breadcrumbs */
    .breadcrumbs {
        margin-bottom: 15px; /* Reduced from 20px */
        font-size: 12px; /* Reduced from 14px */
    }

    .breadcrumbs a {
        color: #ff6200;
        text-decoration: none;
        margin-right: 4px; /* Reduced from 5px */
    }

    .breadcrumbs a:hover {
        text-decoration: underline;
    }

    .breadcrumbs span {
        color: #666;
        margin-right: 4px; /* Reduced from 5px */
    }

    h2 {
        text-align: center;
        color: #ff6200;
        margin-bottom: 15px; /* Reduced from 25px */
        font-size: 20px; /* Reduced from 24px */
    }

    form {
        display: flex;
        flex-direction: column;
    }

    .form-group {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px; /* Reduced from 15px */
        align-items: center;
    }

    .form-group label {
        width: 25%; /* Adjusted for better balance */
        font-weight: bold;
        color: #000;
        font-size: 14px; /* Reduced from default */
    }

    .form-group input {
        width: 70%; /* Reduced from 75% */
        padding: 8px; /* Reduced from 10px */
        border: 1px solid #ff6200;
        border-radius: 4px; /* Slightly smaller radius */
        font-size: 14px; /* Reduced from 16px */
        background: #fff;
        color: #000;
        outline: none;
    }

    .form-group input:focus {
        border-color: #ff8533;
        box-shadow: 0 0 4px rgba(255, 98, 0, 0.5); /* Reduced shadow */
    }

    button {
        width: 100%;
        padding: 10px; /* Reduced from 12px */
        background: #ff6200;
        color: #fff;
        border: none;
        border-radius: 4px; /* Slightly smaller radius */
        font-size: 16px; /* Reduced from 18px */
        cursor: pointer;
        margin-top: 15px; /* Reduced from 20px */
        transition: background 0.3s ease;
    }

    button:hover {
        background: #e65c00;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .container {
            width: 80%; /* Adjusted for smaller screens */
        }

        .form-group {
            flex-direction: column;
            align-items: flex-start;
        }

        .form-group label, .form-group input {
            width: 100%;
            margin-bottom: 6px; /* Reduced from 8px */
        }
    }
</style>
</head>
<body>
    
<div class="container">
    <!-- Breadcrumbs
    <div class="breadcrumbs">
        <a href="/">Home</a> <span>></span>
        <a href="/profile">Profile</a> <span>></span>
        <span>Add Address</span>
    </div> -->
    
<form id="addAddress">
    <div class="form-group">
        <label>Address Type:</label>
        <input type="text" name="address_type" required id="addressType">
        <input type="hidden" name="userId" value="<%= userId %>" id="userid">

    </div>

    <div class="form-group">
        <label>Name:</label>
        <input type="text" name="name" required id="name">
    </div>

    <div class="form-group">
        <label>City:</label>
        <input type="text" name="city" required id="city">
    </div>

    <div class="form-group">
        <label>Landmark:</label>
        <input type="text" name="landmark" id="landmark">
    </div>

    <div class="form-group">
        <label>State:</label>
        <input type="text" name="state" required id="state">
    </div>

    <div class="form-group">
        <label>Pincode:</label>
        <input type="text" name="pincode" required id="pincode">
    </div>

    <div class="form-group">
        <label>Phone:</label>
        <input type="tel" name="phone" required id="phone">
    </div>
<!-- 
    <div class="form-group">
        <label>Alternate Phone:</label>
        <input type="tel" name="alt_phone" id="alternatePhone">
        <input type="hidden" name="userId" value="" id="userid">
    </div> -->


    <button type="submit">Submit</button>
</form>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

document.getElementById("addAddress").addEventListener("submit", async (event) => {
    event.preventDefault();

    const addressType = document.getElementById("addressType").value.trim();
    const name = document.getElementById("name").value.trim();
    const city = document.getElementById("city").value.trim();
    const landmark = document.getElementById("landmark").value.trim();
    const state = document.getElementById("state").value.trim();
    const pincode = document.getElementById("pincode").value.trim();
    const phone = document.getElementById("phone").value.trim();
    
    const userId = document.getElementById("userid").value.trim();

    // Validation Patterns
    const alphabetPattern = /^[A-Za-z\s]+$/;  // Only alphabets and spaces
    const pincodePattern = /^[1-9][0-9]{5}$/; // 6-digit positive number, cannot start with 0
    const phonePattern = /^[6-9]\d{9}$/;      // 10-digit number, starts with 6-9

    // if (!addressType || !name || !city || !state || !pincode || !phone) {
    //     return Swal.fire("Error!", "All fields except Alternate Phone are required.", "error");
    // }

    if (!alphabetPattern.test(addressType) || !alphabetPattern.test(name) || !alphabetPattern.test(city) || !alphabetPattern.test(state) || (landmark && !alphabetPattern.test(landmark))) {
        return Swal.fire("Error!", "Address Type, Name, City, Landmark, and State should contain only alphabets.", "error");
    }

    if (!pincodePattern.test(pincode)) {
        return Swal.fire("Error!", "Pincode must be a 6-digit positive number.", "error");
    }

    if (!phonePattern.test(phone)) {
        return Swal.fire("Error!", "Phone number must be a 10-digit positive number starting with 6-9.", "error");
    }

    // if (altPhone && !phonePattern.test(altPhone)) {
    //     return Swal.fire("Error!", "Alternate Phone must be a 10-digit positive number starting with 6-9.", "error");
    // }

    // If all validations pass, send the data
    const data = {
        address_type: addressType,
        name: name,
        city: city,
        landmark: landmark,
        state: state,
        pincode: pincode,
        phone: phone,
        userId: userId
    };
    console.log(data)

    try {
        const response = await fetch("/addAddress", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            Swal.fire({
                title: "Success!",
                text: "Address Added Successfully",
                icon: "success",
                showConfirmButton: true
            }).then(() => {
                if (document.referrer.includes("/checkout")) {
                    window.location.href = "/checkout";
                } else {
                    window.location.href = "/profile";
                }
            });
        } else {
            Swal.fire("Error!", "Failed to add address. Please try again.", "error");
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire("Error!", "Something went wrong.", "error");
    }
});


</script>

</html>