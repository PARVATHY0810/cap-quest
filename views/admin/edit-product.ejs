<%- include("../../views/partials/admin/header") %>
<head>
   <style>
       .thumbnails-container {
           display: flex;
           overflow-x: auto;
       }

       .thumbnail {
           margin-right: 10px;
       }
       
       .error-message {
           color: red;
           display: none;
           font-size: 12px;
           margin-top: 5px;
       }
       
       .image-preview-container {
           display: flex;
           flex-direction: column;
           align-items: center;
           margin-bottom: 15px;
           width: 150px;
           position: relative;
       }
       
       .image-preview {
           width: 100px;
           height: 100px;
           object-fit: cover;
           margin-bottom: 5px;
           border: 1px solid #ddd;
           background-color: #f8f8f8;
       }
       
       .remove-image-btn {
           position: absolute;
           top: 0;
           right: 0;
           background: rgba(255, 0, 0, 0.7);
           color: white;
           border: none;
           border-radius: 50%;
           width: 20px;
           height: 20px;
           font-size: 10px;
           cursor: pointer;
           display: flex;
           align-items: center;
           justify-content: center;
       }
       
       .image-position-label {
           font-size: 12px;
           margin-top: 5px;
       }
       
       .images-grid {
           display: flex;
           flex-wrap: wrap;
           gap: 15px;
       }
       
       .cropper-container {
           background-color: #f8f8f8;
           padding: 15px;
           border-radius: 5px;
           border: 1px solid #ddd;
       }
   </style>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css">
</head>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/editProduct/<%=product._id %>" enctype="multipart/form-data" id="editProductForm">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%=product.productName%>"
                                class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand">
                                <%for(let i=0;i<brand.length;i++){%>
                                <option value="<%=brand[i].brandName%>" <% if(brand[i].brandName === product.brand) { %>selected<% } %>>
                                    <%=brand[i].brandName%>
                                </option>
                                <%}%>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea name="descriptionData" class="form-control border" rows="4"><%=product.description%></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text"
                                        value="<%=product.regularPrice%>" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input name="salePrice" type="text" value="<%=product.salePrice%>"
                                        class="form-control border">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input name="quantity" type="text" value="<%=product.quantity%>"
                                        class="form-control border">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" value="<%=product.color%>"
                                        class="form-control border">
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" name="category">
                                            <%for(let i=0;i<cat.length;i++){%>
                                            <option value="<%=cat[i]._id%>" <% if(cat[i]._id.toString() === product.category.toString()) { %>selected<% } %>>
                                                <%=cat[i].name%>
                                            </option>
                                            <%}%>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                                <!-- Current Images Display -->
                                <div class="mb-4">
                                    <label class="form-label">Current Images</label>
                                    <div class="images-grid" id="current-images-container">
                                        <%for(let i=0;i<product.productImage.length;i++){%>
                                        <div class="image-preview-container" id="image-container-<%=i%>">
                                            <input type="hidden" name="currentImages[]" value="<%=product.productImage[i]%>">
                                            <input type="hidden" name="imagePositions[]" value="<%=i%>">
                                            <img class="image-preview" src="/uploads/re-image/<%=product.productImage[i]%>" alt="Product Image">
                                            <button type="button" class="remove-image-btn" onclick="deleteSingleImage('<%=product.productImage[i]%>','<%=product._id%>', '<%=i%>')">X</button>
                                            <span class="image-position-label">Position <%=i+1%></span>
                                        </div>
                                        <%}%>
                                    </div>
                                </div>
                                
                                <!-- Image Upload Controls -->
                                <div class="mb-4">
                                    <label class="form-label">Upload/Replace Images</label>
                                    <div class="images-grid" id="upload-images-container">
                                        <!-- First image slot -->
                                        <div class="image-preview-container" id="upload-container-0">
                                            <img src="" alt="" id="imgView0" class="image-preview">
                                            <input class="form-control" type="file" name="images" id="input0" 
                                                accept="image/png, image/jpeg, image/jpg" 
                                                onchange="validateAndPreviewImage(event, 0)"
                                                data-position="0">
                                            <button type="button" class="btn btn-sm btn-danger mt-2" onclick="removeImage(0)">Remove</button>
                                            <div class="error-message" id="image-error-0"></div>
                                            <input type="hidden" name="replace_position[]" value="0">
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-primary mt-3" id="addImageBtn">Add Another Image</button>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                                
                                <!-- Cropper Container (hidden initially) -->
                                <div id="cropperContainer" class="cropper-container" style="display:none; margin-top: 20px;">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <div id="cropperWrapper" style="max-width: 100%; height: 400px;">
                                                <img src="" id="cropperImage" style="max-width: 100%;">
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="d-flex flex-column">
                                                <h5>Preview</h5>
                                                <div id="cropped-preview" style="width: 150px; height: 150px; overflow: hidden; margin-bottom: 10px; border: 1px solid #ddd;"></div>
                                                <button type="button" id="saveCroppedBtn" class="btn btn-primary">Save Cropped Image</button>
                                                <button type="button" id="cancelCropBtn" class="btn btn-secondary mt-2">Cancel</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" id="updateBtn"
                                type="button" onclick="validateAndSubmit()">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    let currentCropper = null;
    let currentImageInput = null;
    let imageCount = 1; // Start with one image input
    let formSubmitted = false;
    let pendingCropperSave = false;

    // Document ready function
    document.addEventListener('DOMContentLoaded', function() {
        // Check for success parameter in URL
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('success') === 'true') {
            Swal.fire({
                title: 'Success!',
                text: 'Product has been updated successfully',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then(() => {
                // Remove the success parameter from URL
                window.history.replaceState({}, document.title, window.location.pathname);
            });
        }
        
        // Initialize the form
        initializeForm();
    });

    function initializeForm() {
        // Clear any previous data
        clearErrorMessages();
        
        // Setup empty image containers
        document.querySelectorAll('#upload-images-container .image-preview-container').forEach(container => {
            const index = container.querySelector('input[type="file"]').getAttribute('data-position');
            document.getElementById(`imgView${index}`).src = '';
        });
    }

    // Add more image upload slots
    document.getElementById('addImageBtn').addEventListener('click', function() {
        const container = document.getElementById('upload-images-container');
        const position = imageCount;
        
        const newImageDiv = document.createElement('div');
        newImageDiv.className = 'image-preview-container';
        newImageDiv.id = `upload-container-${position}`;
        newImageDiv.innerHTML = `
            <img src="" alt="" id="imgView${position}" class="image-preview">
            <input class="form-control" type="file" name="images" id="input${position}" 
                accept="image/png, image/jpeg, image/jpg" 
                onchange="validateAndPreviewImage(event, ${position})"
                data-position="${position}">
            <button type="button" class="btn btn-sm btn-danger mt-2" onclick="removeImage(${position})">Remove</button>
            <div class="error-message" id="image-error-${position}"></div>
            <input type="hidden" name="replace_position[]" value="${position}">
        `;
        
        container.appendChild(newImageDiv);
        imageCount++;
    });

    // Validate and preview image before upload
    function validateAndPreviewImage(event, index) {
        const file = event.target.files[0];
        const errorElement = document.getElementById(`image-error-${index}`);
        errorElement.style.display = 'none';
        
        if (!file) {
            return false;
        }
        
        // Validate file type
        const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
        if (!allowedTypes.includes(file.type)) {
            errorElement.textContent = 'Invalid file type. Only JPEG, PNG, and JPG are allowed.';
            errorElement.style.display = 'block';
            event.target.value = '';
            document.getElementById(`imgView${index}`).src = '';
            return false;
        }
        
        // Validate file size (max 2MB)
        const maxSize = 2 * 1024 * 1024; // 2MB
        if (file.size > maxSize) {
            errorElement.textContent = 'File size exceeds 2MB.';
            errorElement.style.display = 'block';
            event.target.value = '';
            document.getElementById(`imgView${index}`).src = '';
            return false;
        }
        
        // If validation passes, start cropping
        startCropping(event.target, index);
        return true;
    }

    // Start cropping process
    function startCropping(inputElement, index) {
        currentImageInput = inputElement;
        
        // Set up the cropper
        const reader = new FileReader();
        reader.onload = function(e) {
            const cropperImage = document.getElementById('cropperImage');
            cropperImage.src = e.target.result;
            
            // Show cropper container
            document.getElementById('cropperContainer').style.display = 'block';
            
            // Scroll to cropper
            document.getElementById('cropperContainer').scrollIntoView({ behavior: 'smooth' });
            
            // Initialize cropper
            if (currentCropper) {
                currentCropper.destroy();
            }
            
            currentCropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 0.8,
                zoomable: true,
                preview: '#cropped-preview'
            });
        };
        
        if (inputElement.files[0]) {
            reader.readAsDataURL(inputElement.files[0]);
        }
    }

    // Save cropped image
    document.getElementById('saveCroppedBtn').addEventListener('click', function() {
        if (!currentCropper || !currentImageInput) return;
        
        const canvas = currentCropper.getCroppedCanvas({
            width: 600,
            height: 600
        });
        
        pendingCropperSave = false;
        
        // Convert canvas to blob
        canvas.toBlob(function(blob) {
            // Create a new file from the blob
            const fileName = currentImageInput.files[0].name;
            const newFile = new File([blob], fileName, {
                type: 'image/jpeg',
                lastModified: new Date().getTime()
            });
            
            // Create a FileList-like object
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(newFile);
            
            // Update the file input
            currentImageInput.files = dataTransfer.files;
            
            // Update preview image
            const index = currentImageInput.getAttribute('data-position');
            document.getElementById(`imgView${index}`).src = canvas.toDataURL('image/jpeg');
            
            // Hide cropper
            document.getElementById('cropperContainer').style.display = 'none';
            
            // Reset variables
            currentCropper.destroy();
            currentCropper = null;
            currentImageInput = null;
            
            // If form was submitted while cropping, submit it now
            if (formSubmitted) {
                submitForm();
            }
        }, 'image/jpeg', 0.9);
    });

    // Cancel cropping
    document.getElementById('cancelCropBtn').addEventListener('click', function() {
        if (currentCropper) {
            currentCropper.destroy();
            currentCropper = null;
        }
        
        if (currentImageInput) {
            currentImageInput.value = '';
            const index = currentImageInput.getAttribute('data-position');
            document.getElementById(`imgView${index}`).src = '';
            currentImageInput = null;
        }
        
        document.getElementById('cropperContainer').style.display = 'none';
        pendingCropperSave = false;
        
        // If form was submitted while cropping, submit it now
        if (formSubmitted) {
            submitForm();
        }
    });

    // Remove image
    function removeImage(index) {
        document.getElementById(`input${index}`).value = '';
        document.getElementById(`imgView${index}`).src = '';
        document.getElementById(`image-error-${index}`).style.display = 'none';
    }

    // Delete existing image via AJAX
    function deleteSingleImage(imageId, productId, position) {
        if (confirm('Are you sure you want to delete this image?')) {
            $.ajax({
                url: "/admin/deleteImage",
                method: 'post',
                data: { 
                    imageNameToServer: imageId, 
                    productIdToServer: productId,
                    positionToServer: position 
                },
                success: ((response) => {
                    if (response.status === true) {
                        // Remove the image container from the DOM
                        document.getElementById(`image-container-${position}`).remove();
                        
                        // Show success message
                        Swal.fire({
                            title: 'Deleted!',
                            text: 'Image has been deleted successfully',
                            icon: 'success',
                            timer: 1500,
                            showConfirmButton: false
                        });
                        
                        // Reindex remaining images
                        reindexImages();
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to delete image',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }),
                error: (() => {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Failed to delete image',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                })
            });
        }
    }

    // Reindex image positions after deletion
    function reindexImages() {
        const containers = document.querySelectorAll('#current-images-container .image-preview-container');
        containers.forEach((container, index) => {
            // Update position label
            const label = container.querySelector('.image-position-label');
            if (label) {
                label.textContent = `Position ${index + 1}`;
            }
            
            // Update position input
            const positionInput = container.querySelector('input[name="imagePositions[]"]');
            if (positionInput) {
                positionInput.value = index;
            }
            
            // Update container ID
            container.id = `image-container-${index}`;
            
            // Update delete button onclick
            const deleteBtn = container.querySelector('.remove-image-btn');
            if (deleteBtn) {
                const imageName = container.querySelector('input[name="currentImages[]"]').value;
                const productId = '<%= product._id %>';
                deleteBtn.setAttribute('onclick', `deleteSingleImage('${imageName}','${productId}', '${index}')`);
            }
        });
    }

    // Form validation and submission
    function validateAndSubmit() {
        clearErrorMessages();
        
        if (validateForm()) {
            formSubmitted = true;
            
            // Check if any cropper is currently active
            if (currentCropper && currentImageInput) {
                pendingCropperSave = true;
                document.getElementById('saveCroppedBtn').click();
            } else {
                submitForm();
            }
        }
    }

    function submitForm() {
        // If a save is pending, return and wait for it to complete
        if (pendingCropperSave) return;
        
        const form = document.getElementById('editProductForm');
        const formData = new FormData(form);
        
        // Disable submit button to prevent multiple submissions
        document.getElementById('updateBtn').disabled = true;
        
        // Show loading indicator
        Swal.fire({
            title: 'Updating...',
            text: 'Please wait while we update the product',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });
        
        fetch(form.action, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (response.redirected) {
                // Show success message
                Swal.fire({
                    title: 'Success!',
                    text: 'Product has been updated successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/admin/products';
                    }
                });
            } else {
                return response.json().then(data => {
                    throw new Error(data.message || 'Failed to update product');
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: error.message || 'Failed to update product',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        })
        .finally(() => {
            // Re-enable submit button
            document.getElementById('updateBtn').disabled = false;
            formSubmitted = false;
        });
    }

    function validateForm() {
        const name = document.getElementsByName('productName')[0].value;
        const description = document.getElementsByName('descriptionData')[0].value;
        const regularPrice = document.getElementsByName('regularPrice')[0].value;
        const salePrice = document.getElementsByName('salePrice')[0].value;
        const color = document.getElementsByName('color')[0].value;
        const quantity = document.getElementsByName('quantity')[0].value;
        let isValid = true;

        // Product name validation
        if (name.trim() === "") {
            displayErrorMessage('productName-error', 'Please enter a product name.');
            isValid = false;
        }

        // Description validation
        if (description.trim() === '') {
            displayErrorMessage('description-error', 'Please enter a product description.');
            isValid = false;
        }

        // Quantity validation
        if (quantity.trim() === '') {
            displayErrorMessage('quantity-error', 'Please enter a quantity.');
            isValid = false;
        } else if (isNaN(quantity) || parseInt(quantity) < 0) {
            displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
            isValid = false;
        }

        // Regular price validation
        if (regularPrice.trim() === '') {
            displayErrorMessage('regularPrice-error', 'Please enter a regular price.');
            isValid = false;
        } else if (!/^\d+(\.\d{1,2})?$/.test(regularPrice) || parseFloat(regularPrice) < 0) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price (format: 0.00).');
            isValid = false;
        }

        // Sale price validation (optional but must be valid if provided)
        if (salePrice.trim() !== '' && (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0)) {
            displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price (format: 0.00).');
            isValid = false;
        }

        // Compare sale price with regular price if both are provided
        if (salePrice.trim() !== '' && regularPrice.trim() !== '') {
            if (parseFloat(salePrice) > parseFloat(regularPrice)) {
                displayErrorMessage('salePrice-error', 'Sale price cannot be higher than regular price.');
                isValid = false;
            }
        }

        // Color validation
        if (color.trim() === "") {
            displayErrorMessage('color-error', 'Please enter a color.');
            isValid = false;
        }

        // Validate all image inputs
        for (let i = 0; i < imageCount; i++) {
            const input = document.getElementById(`input${i}`);
            if (input && input.files.length > 0) {
                const file = input.files[0];
                const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
                const maxSize = 2 * 1024 * 1024; // 2MB
                
                if (!allowedTypes.includes(file.type)) {
                    displayErrorMessage(`image-error-${i}`, 'Invalid file type. Only JPEG, PNG, and JPG are allowed.');
                    isValid = false;
                }
                
                if (file.size > maxSize) {
                    displayErrorMessage(`image-error-${i}`, 'File size exceeds 2MB.');
                    isValid = false;
                }
            }
        }

        // If validation fails, scroll to the first error
        if (!isValid) {
            const firstError = document.querySelector('.error-message[style="display: block;"]');
            if (firstError) {
                firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        return isValid;
    }

    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = "block";
        }
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.style.display = "none";
        });
    }
</script>
<%- include("../../views/partials/admin/footer") %>