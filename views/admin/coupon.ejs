<%- include("../../views/partials/admin/header") %>

<head>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coupon Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .coupon-table th, .coupon-table td {
            vertical-align: middle;
        }
        .expired {
            background-color: #f8d7da;
        }
        .status-toggle {
            cursor: pointer;
        }
    </style>
</head>

<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Coupon Management</h1>

        <!-- Create New Coupon Button -->
        <div class="text-center mb-4">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal">
                Create New Coupon
            </button>
        </div>

        <!-- Add Coupon Modal -->
        <div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addCouponModalLabel">Add New Coupon</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addCouponForm" action="/admin/add-coupon" method="POST">
                            <div class="mb-3">
                                <label for="code" class="form-label">Coupon Code</label>
                                <input type="text" class="form-control" id="code" name="code" required oninput="this.value = this.value.toUpperCase()">
                                <div class="invalid-feedback">Coupon code is required.</div>
                            </div>
                            <div class="mb-3">
                                <label for="offerPrice" class="form-label">Offer Price</label>
                                <input type="number" class="form-control" id="offerPrice" name="offerPrice" min="0" required>
                                <div class="invalid-feedback">Offer price must be a positive number.</div>
                            </div>
                            <div class="mb-3">
                                <label for="minimumPrice" class="form-label">Minimum Price</label>
                                <input type="number" class="form-control" id="minimumPrice" name="minimumPrice" min="0" required>
                                <div class="invalid-feedback">Minimum price must be a positive number.</div>
                            </div>
                            <div class="mb-3">
                                <label for="startOn" class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="startOn" name="startOn" required>
                                <div class="invalid-feedback">Start date cannot be earlier than today.</div>
                            </div>
                            <div class="mb-3">
                                <label for="expireOn" class="form-label">Expiration Date</label>
                                <input type="date" class="form-control" id="expireOn" name="expireOn" required>
                                <div class="invalid-feedback">Expiration date is required.</div>
                            </div>
                            <div class="mb-3">
                                <label for="maxUses" class="form-label">Max Uses</label>
                                <input type="number" class="form-control" id="maxUses" name="maxUses" min="1" value="5" required>
                                <div class="invalid-feedback">Max uses must be at least 1.</div>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Add</button>
                        </form>
                        <div id="formMessage" class="mt-2"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Coupon Modal -->
<!-- Edit Coupon Modal -->
<div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editCouponForm">
            <input type="hidden" id="editCouponId" name="couponId">
            <div class="mb-3">
              <label for="editCode" class="form-label">Coupon Code</label>
              <input type="text" class="form-control" id="editCode" name="code" required>
            </div>
            <div class="mb-3">
              <label for="editOfferPrice" class="form-label">Offer Price</label>
              <input type="number" class="form-control" id="editOfferPrice" name="offerPrice" required>
            </div>
            <div class="mb-3">
              <label for="editMinimumPrice" class="form-label">Minimum Price</label>
              <input type="number" class="form-control" id="editMinimumPrice" name="minimumPrice" required>
            </div>
            <div class="mb-3">
              <label for="editStartOn" class="form-label">Start Date</label>
              <input type="date" class="form-control" id="editStartOn" name="startOn" required>
            </div>
            <div class="mb-3">
              <label for="editExpireOn" class="form-label">Expiration Date</label>
              <input type="date" class="form-control" id="editExpireOn" name="expireOn" required>
            </div>
            <div class="mb-3">
              <label for="editMaxUses" class="form-label">Max Uses</label>
              <input type="number" class="form-control" id="editMaxUses" name="maxUses" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">Save Changes</button>
          </form>
        </div>
      </div>
    </div>
  </div>

        <!-- Coupon List Table -->
        <h3 class="mt-5">Coupon List</h3>
        <table class="table table-striped coupon-table">
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Offer Price</th>
                    <th>Min Price</th>
                    <th>Start Date</th>
                    <th>Expire Date</th>
                    <th>Max Uses</th>
                    <th>Uses Count</th>
                    <th>Status</th>
                    <th>Action</th>
                   
                </tr>
            </thead>
            <tbody>
                <% if (coupons.length > 0) { %>
                  <% coupons.forEach(coupon => { %>
                    <tr class="<%= new Date(coupon.expireOn) < new Date() ? 'expired' : '' %>">
                      <td><%= coupon.code.toUpperCase() %></td> <!-- Display in uppercase -->
                      <td><%= coupon.offerPrice %></td>
                      <td><%= coupon.minimumPrice %></td>
                      <td><%= new Date(coupon.startOn).toLocaleDateString() %></td>
                      <td><%= new Date(coupon.expireOn).toLocaleDateString() %></td>
                      <td><%= coupon.maxUses %></td>
                      <td><%= coupon.usesCount %></td>
                      <td><%= coupon.isListed ? 'Listed' : 'Unlisted' %></td>
                      <td>
                        <button class="btn btn-sm btn-warning status-toggle" data-id="<%= coupon._id %>">
                          <%= coupon.isListed ? 'Unlist' : 'List' %>
                        </button>
                        <button class="btn btn-sm btn-primary edit-coupon" data-id="<%= coupon._id %>" data-bs-toggle="modal" data-bs-target="#editCouponModal">
                          Edit
                        </button>
                        <button class="btn btn-sm btn-danger delete-coupon" data-id="<%= coupon._id %>">
                          Delete
                        </button>
                      </td>
                    </tr>
                  <% }) %>
                <% } else { %>
                  <tr>
                    <td colspan="9" class="text-center">No coupons found</td>
                  </tr>
                <% } %>
              </tbody>
        </table>

        <!-- Pagination -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <% if (hasPrevPage) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
                    </li>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                    </li>
                <% } %>
                <% if (hasNextPage) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
</body>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Set minimum date for startOn to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('startOn').setAttribute('min', today);

        // Form validation and submission
        const addCouponForm = document.getElementById('addCouponForm');
        addCouponForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Client-side validation
            const code = document.getElementById('code').value.trim();
            const offerPrice = document.getElementById('offerPrice').value;
            const minimumPrice = document.getElementById('minimumPrice').value;
            const startOn = document.getElementById('startOn').value;
            const expireOn = document.getElementById('expireOn').value;
            const maxUses = document.getElementById('maxUses').value;

            let isValid = true;
            if (!code) {
                document.getElementById('code').classList.add('is-invalid');
                isValid = false;
            } else {
                document.getElementById('code').classList.remove('is-invalid');
            }
            if (offerPrice <= 0) {
                document.getElementById('offerPrice').classList.add('is-invalid');
                isValid = false;
            } else {
                document.getElementById('offerPrice').classList.remove('is-invalid');
            }
            if (minimumPrice < 0) {
                document.getElementById('minimumPrice').classList.add('is-invalid');
                isValid = false;
            } else {
                document.getElementById('minimumPrice').classList.remove('is-invalid');
            }
            if (!startOn || new Date(startOn) < new Date(today)) {
                document.getElementById('startOn').classList.add('is-invalid');
                isValid = false;
            } else {
                document.getElementById('startOn').classList.remove('is-invalid');
            }
            if (!expireOn || new Date(expireOn) <= new Date(startOn)) {
                document.getElementById('expireOn').classList.add('is-invalid');
                isValid = false;
            } else {
                document.getElementById('expireOn').classList.remove('is-invalid');
            }
            if (maxUses < 1) {
                document.getElementById('maxUses').classList.add('is-invalid');
                isValid = false;
            } else {
                document.getElementById('maxUses').classList.remove('is-invalid');
            }

            if (!isValid) return;

            // Submit form via AJAX
            const formData = new FormData(addCouponForm);
            const data = Object.fromEntries(formData);

            // Inside the existing script tag, modify the form submission part
try {
    const response = await fetch('/admin/coupons', {  // Change the URL from '/admin/add-coupon' to '/admin/coupons'
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    });
    const result = await response.json();
    
    // Add SweetAlert for messages
    if (result.success) {
        Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: result.message,
            timer: 2000,
            showConfirmButton: false
        }).then(() => {
            addCouponForm.reset();
            bootstrap.Modal.getInstance(document.getElementById('addCouponModal')).hide();
            location.reload();
        });
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: result.message,
            timer: 2000,
            showConfirmButton: false
        });
    }
} catch (error) {
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An unexpected error occurred',
        timer: 2000,
        showConfirmButton: false
    });
}
        });

         

        // Handle status toggle with AJAX
        document.querySelectorAll('.status-toggle').forEach(button => {
            // In the status-toggle event listener
button.addEventListener('click', async () => {
    const couponId = button.getAttribute('data-id');
    try {
        const response = await fetch(`/admin/toggle-coupon/${couponId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        const result = await response.json();
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Coupon Status Updated',
                text: `Coupon has been ${result.isListed ? 'listed' : 'unlisted'}`,
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                button.textContent = result.isListed ? 'Unlist' : 'List';
                button.classList.toggle('btn-warning', result.isListed);
                button.classList.toggle('btn-success', !result.isListed);
                button.parentElement.previousElementSibling.textContent = 
                    result.isListed ? 'Listed' : 'Unlisted';
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update coupon status',
            timer: 2000,
            showConfirmButton: false
        });
    }
});
        });
        
    </script>
  <script>
    // Edit Coupon functionality
    document.querySelectorAll('.edit-coupon').forEach(button => {
      button.addEventListener('click', async () => {
        const couponId = button.getAttribute('data-id');
        try {
          const response = await fetch(`/admin/coupons/${couponId}`);
          const coupon = await response.json();
          if (coupon) {
            document.getElementById('editCouponId').value = coupon._id;
            document.getElementById('editCode').value = coupon.code;
            document.getElementById('editOfferPrice').value = coupon.offerPrice;
            document.getElementById('editMinimumPrice').value = coupon.minimumPrice;
            document.getElementById('editStartOn').value = new Date(coupon.startOn).toISOString().split('T')[0];
            document.getElementById('editExpireOn').value = new Date(coupon.expireOn).toISOString().split('T')[0];
            document.getElementById('editMaxUses').value = coupon.maxUses;
          }
        } catch (error) {
          console.error('Error fetching coupon:', error);
        }
      });
    });
  
    document.getElementById('editCouponForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      try {
        const response = await fetch(`/admin/coupons/${data.couponId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const result = await response.json();
        if (result.success) {
          Swal.fire({
            icon: 'success',
            title: 'Coupon Updated',
            text: result.message,
            timer: 2000,
            showConfirmButton: false
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.message,
            timer: 2000,
            showConfirmButton: false
          });
        }
      } catch (error) {
        console.error('Error updating coupon:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to update coupon',
          timer: 2000,
          showConfirmButton: false
        });
      }
    });
  
    // Delete Coupon functionality
    document.querySelectorAll('.delete-coupon').forEach(button => {
      button.addEventListener('click', async () => {
        const couponId = button.getAttribute('data-id');
        Swal.fire({
          title: 'Are you sure?',
          text: "You won't be able to revert this!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete it!'
        }).then(async (result) => {
          if (result.isConfirmed) {
            try {
              const response = await fetch(`/admin/coupons/${couponId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
              });
              const result = await response.json();
              if (result.success) {
                Swal.fire({
                  icon: 'success',
                  title: 'Deleted!',
                  text: 'Coupon has been deleted.',
                  timer: 2000,
                  showConfirmButton: false
                }).then(() => {
                  location.reload();
                });
              } else {
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: result.message,
                  timer: 2000,
                  showConfirmButton: false
                });
              }
            } catch (error) {
              console.error('Error deleting coupon:', error);
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to delete coupon',
                timer: 2000,
                showConfirmButton: false
              });
            }
          }
        });
      });
    });
  </script>
<%- include("../../views/partials/admin/footer") %>
